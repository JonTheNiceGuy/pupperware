# Don't run Azure when a branch is updated, only when a PR is updated.
# Prevents double builds when a PR is made from the main repo and not a fork.
trigger: none
pr:
  autoCancel: true
  branches:
    include:
    - '*'

pool:
  # self-hosted agent on Windows 10 1709 environment
  # includes newer Docker engine with LCOW enabled, new build of LCOW image
  # includes Ruby 2.5, Go 1.10, Node.js 10.10, hadolint
  name: Default

variables:
  COMPOSE_PROJECT_NAME: pupperware

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true  # whether to fetch clean each time
- powershell: |
    . gem/ci/build.ps1
    Write-HostDiagnostics
  displayName: Diagnostic Host Information
  name: hostinfo

- powershell: |
    bundle install --with test --path '.bundle/gems'
    # set an Azure variable for temp volumes root
    $tempVolumeRoot = Join-Path -Path $ENV:TEMP -ChildPath ([System.IO.Path]::GetRandomFileName())
    Write-Host "##vso[task.setvariable variable=VOLUME_ROOT]$tempVolumeRoot"
  displayName: Prepare Test Environment
  name: test_prepare

- powershell: |
    Write-Host 'Writing compose config to disk'
    $content = @"
    VOLUME_ROOT=$ENV:VOLUME_ROOT
    "@
    $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
    [System.IO.File]::WriteAllLines(".env", $content, $Utf8NoBomEncoding)
    Get-Content -Path '.env'
    Write-Host 'Executing Pupperware specs'
    bundle exec rspec --version
    bundle exec rspec spec --fail-fast
  displayName: Test pupperware
  name: test_pupperware

- task: PublishTestResults@2
  displayName: Publish pupperware test results
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'TEST-rspec.xml'
    testRunTitle: pupperware Test Results
  condition: always()

- powershell: |
    Write-Host 'Pruning containers'
    docker container prune --force
    Write-Host 'Pruning images'
    docker image prune --filter "dangling=true" --force
    Write-Host "Pruning Volumes"
    docker volume prune
    Write-Host "Pruning Networks"
    docker network prune
    Write-Host "Cleaning up temporary volume: $ENV:VOLUME_ROOT"
    Remove-Item $ENV:VOLUME_ROOT -Force -Recurse -ErrorAction Continue
  displayName: Container Cleanup
  timeoutInMinutes: 3
  condition: always()
